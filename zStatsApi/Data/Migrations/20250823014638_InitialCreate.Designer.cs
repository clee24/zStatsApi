// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using zStatsApi.Data;

#nullable disable

namespace zStatsApi.Data.Migrations
{
    [DbContext(typeof(ZStatsContext))]
    [Migration("20250823014638_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("zStatsApi.Entities.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TeamAId")
                        .HasColumnType("integer");

                    b.Property<int>("TeamBId")
                        .HasColumnType("integer");

                    b.Property<int?>("WinnerTeamId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TeamAId");

                    b.HasIndex("TeamBId");

                    b.HasIndex("WinnerTeamId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("zStatsApi.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nickname")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("zStatsApi.Entities.PlayerStat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Blocks")
                        .HasColumnType("integer");

                    b.Property<int>("Digs")
                        .HasColumnType("integer");

                    b.Property<int>("HittingAttempts")
                        .HasColumnType("integer");

                    b.Property<int>("HittingErrors")
                        .HasColumnType("integer");

                    b.Property<int>("HittingKills")
                        .HasColumnType("integer");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceAces")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceAttempts")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceErrors")
                        .HasColumnType("integer");

                    b.Property<int>("SetId")
                        .HasColumnType("integer");

                    b.Property<int>("SettingAttempts")
                        .HasColumnType("integer");

                    b.Property<int>("SettingDimes")
                        .HasColumnType("integer");

                    b.Property<int>("SettingErrors")
                        .HasColumnType("integer");

                    b.Property<int>("Shanks")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("SetId");

                    b.ToTable("PlayerStats");
                });

            modelBuilder.Entity("zStatsApi.Entities.Set", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("MatchId")
                        .HasColumnType("integer");

                    b.Property<int>("SetNumber")
                        .HasColumnType("integer");

                    b.Property<int>("TeamAScore")
                        .HasColumnType("integer");

                    b.Property<int>("TeamBScore")
                        .HasColumnType("integer");

                    b.Property<int?>("WinnerTeamId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("WinnerTeamId");

                    b.ToTable("Sets");
                });

            modelBuilder.Entity("zStatsApi.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("zStatsApi.Entities.TeamPlayer", b =>
                {
                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.HasKey("TeamId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("TeamPlayers");
                });

            modelBuilder.Entity("zStatsApi.Entities.Match", b =>
                {
                    b.HasOne("zStatsApi.Entities.Team", "TeamA")
                        .WithMany("MatchesAsTeamA")
                        .HasForeignKey("TeamAId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("zStatsApi.Entities.Team", "TeamB")
                        .WithMany("MatchesAsTeamB")
                        .HasForeignKey("TeamBId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("zStatsApi.Entities.Team", "WinnerTeam")
                        .WithMany()
                        .HasForeignKey("WinnerTeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("TeamA");

                    b.Navigation("TeamB");

                    b.Navigation("WinnerTeam");
                });

            modelBuilder.Entity("zStatsApi.Entities.PlayerStat", b =>
                {
                    b.HasOne("zStatsApi.Entities.Player", "Player")
                        .WithMany("PlayerStats")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("zStatsApi.Entities.Set", "Set")
                        .WithMany("PlayerStats")
                        .HasForeignKey("SetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Set");
                });

            modelBuilder.Entity("zStatsApi.Entities.Set", b =>
                {
                    b.HasOne("zStatsApi.Entities.Match", "Match")
                        .WithMany("Sets")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("zStatsApi.Entities.Team", "WinnerTeam")
                        .WithMany()
                        .HasForeignKey("WinnerTeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Match");

                    b.Navigation("WinnerTeam");
                });

            modelBuilder.Entity("zStatsApi.Entities.TeamPlayer", b =>
                {
                    b.HasOne("zStatsApi.Entities.Player", "Player")
                        .WithMany("TeamPlayers")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("zStatsApi.Entities.Team", "Team")
                        .WithMany("TeamPlayers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("zStatsApi.Entities.Match", b =>
                {
                    b.Navigation("Sets");
                });

            modelBuilder.Entity("zStatsApi.Entities.Player", b =>
                {
                    b.Navigation("PlayerStats");

                    b.Navigation("TeamPlayers");
                });

            modelBuilder.Entity("zStatsApi.Entities.Set", b =>
                {
                    b.Navigation("PlayerStats");
                });

            modelBuilder.Entity("zStatsApi.Entities.Team", b =>
                {
                    b.Navigation("MatchesAsTeamA");

                    b.Navigation("MatchesAsTeamB");

                    b.Navigation("TeamPlayers");
                });
#pragma warning restore 612, 618
        }
    }
}
